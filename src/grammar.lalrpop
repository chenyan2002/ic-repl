//use candid::parser::value::{IDLField, IDLValue, IDLArgs, VariantValue};
use super::value::{Field, Value};
use candid::parser::types::{IDLType, TypeField, PrimType, FuncType, FuncMode, Binding};
use candid::parser::typing::{TypeEnv, check_unique};
use super::token::{Token, error2, LexicalError, Span, Spanned};
use candid::{Principal, types::Label};
use super::command::{Command, Commands, BinOp};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;
    enum Token {
        "decimal" => Token::Decimal(<String>),
        "hex" => Token::Hex(<String>),
        "float" => Token::Float(<String>),
        "bool" => Token::Boolean(<bool>),
        "text" => Token::Text(<String>),
        "id" => Token::Id(<String>),
        "null" => Token::Null,
        "opt" => Token::Opt,
        "vec" => Token::Vec,
        "record" => Token::Record,
        "variant" => Token::Variant,
        "func" => Token::Func,
        "service" => Token::Service,
        "oneway" => Token::Oneway,
        "query" => Token::Query,
        "blob" => Token::Blob,
        "type" => Token::Type,
        "import" => Token::Import,
        "export" => Token::Export,
        "load" => Token::Load,
        "principal" => Token::Principal,
        "call" => Token::Call,
        "config" => Token::Config,
        "show" => Token::Show,
        "assert" => Token::Assert,
        "let" => Token::Let,
        "file" => Token::File,
        "identity" => Token::Identity,
        "sign" => Token::Sign(<char>),
        "=" => Token::Equals,
        "==" => Token::TestEqual,
        "~=" => Token::SubEqual,
        "!=" => Token::NotEqual,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "," => Token::Comma,
        "." => Token::Dot,
        ";" => Token::Semi,
        ":" => Token::Colon,
        "->" => Token::Arrow,
    }
}

pub Commands: Commands = SepBy<Command, ";"> => Commands(<>);

// Command
pub Command: Command = {
    "call" <canister:Sp<Name>> "."? => {
         let canister = Spanned { span: canister.1.clone(), value: canister.0 };
         Command::Call{canister, method: "".to_string(), args: Vec::new()}
    },
    "call" <canister:Sp<Name>> "." <method:Name> => {
         let canister = Spanned { span: canister.1.clone(), value: canister.0 };    
         Command::Call{canister, method, args: Vec::new()}
    },
    "call" <canister:Sp<Name>> "." <method:Name> "(" <args: SepBy<Value, ",">> ")"? => {
         let canister = Spanned { span: canister.1.clone(), value: canister.0 };    
         Command::Call{canister, method, args}
    },
    "config" <Text> => Command::Config(<>),
    "show" <Value> => Command::Show(<>),
    "assert" <left:Value> "==" <right:Value> => Command::Assert(BinOp::Equal, left, right),
    "assert" <left:Value> "~=" <right:Value> => Command::Assert(BinOp::SubEqual, left, right),
    "assert" <left:Value> "!=" <right:Value> => Command::Assert(BinOp::NotEqual, left, right),
    "let" <id:"id"> "=" <val:Value> => Command::Let(id, val),
    "export" <Text> => Command::Export(<>),
    "load" <Text> => Command::Load(<>),
    "import" <id:"id"> "=" <uri:Sp<Text>> <did:(":" <Text>)?> =>? {
         let principal = Principal::from_text(&uri.0).map_err(|e| error2(e, uri.1))?;
         Ok(Command::Import(id, principal, did))
    },
    "identity" <"id"> => Command::Identity(<>),
}

Value: Value = {
  Arg => <>,
  <v:Var> <mut vs:("." <Var>)*> => {
     let mut res = Vec::with_capacity(vs.len() + 1);
     res.push(v);
     res.append(&mut vs);
     Value::Path(res)
  },
  "file" <Text> => Value::Blob(<>),
}

Var: String = {
     "id" => <>,
}

// Value
//Args: IDLArgs = "(" <SepBy<AnnVal, ",">> ")" => IDLArgs { args: <> };

Arg: Value = {
    "bool" => Value::Bool(<>),
    NumLiteral => <>,
    Text => Value::Text(<>),
    Bytes => {
        let values: Vec<_> = <>.into_iter().map(|v| Value::Nat8(v)).collect();
        Value::Vec(values)
    },
    "null" => Value::Null,
    "opt" <Arg> => Value::Opt(Box::new(<>)),
    "vec" "{" <SepBy<AnnVal, ";">> "}" => Value::Vec(<>),
    "record" "{" <Sp<SepBy<RecordField, ";">>> "}" =>? {
        let mut id: u32 = 0;
        let span = <>.1.clone();
        let mut fs: Vec<Field> = <>.0.into_iter().map(|f| {
          match f.id {
            Label::Unnamed(_) => {
              id = id + 1;
              Field { id: Label::Unnamed(id - 1), val: f.val }
            }
            _ => {
              id = f.id.get_id() + 1;
              f
            }
          }
        }).collect();
        fs.sort_unstable_by_key(|Field { id, .. }| id.get_id());
        check_unique(fs.iter().map(|f| &f.id)).map_err(|e| error2(e, span))?;
        Ok(Value::Record(fs))
    },
    "variant" "{" <VariantField> "}" => Value::Variant(Box::new(<>), 0),
    "principal" <Sp<Text>> =>? Ok(Value::Principal(Principal::from_text(&<>.0).map_err(|e| error2(e, <>.1))?)),
    "service" <Sp<Text>> =>? Ok(Value::Service(Principal::from_text(&<>.0).map_err(|e| error2(e, <>.1))?)),
    "func" <id:Sp<Text>> "." <meth:Name> =>? {
      let id = Principal::from_text(&id.0).map_err(|e| error2(e, id.1))?;
      Ok(Value::Func(id, meth))
    },
    "(" <AnnVal> ")" => <>,
}

Text: String = {
    Sp<"text"> =>? {
        if std::str::from_utf8(<>.0.as_bytes()).is_err() {
          Err(error2("Not valid unicode text", <>.1))
        } else {
          Ok(<>.0)
        }
    }
}

Bytes: Vec<u8> = {
    "blob" <"text"> => <>.into_bytes(),
}

Number: String = {
    "decimal" => <>,
    // "hex" => num_bigint::BigInt::parse_bytes(<>.as_bytes(), 16).unwrap().to_str_radix(10),
}

AnnVal: Value = {
    <Arg> => <>,
    //<arg:Sp<Arg>> ":" <typ:Sp<Typ>> =>? {
    //    let env = TypeEnv::new();
    //    let typ = env.ast_to_type(&typ.0).map_err(|e| error2(e, typ.1))?;
    //    arg.0.annotate_type(true, &env, &typ).map_err(|e| error2(e, arg.1))
    //}
}

NumLiteral: Value = {
    <sign:"sign"?> <n:Number> => {
        let num = match sign {
            Some('-') => format!("-{}", n),
            _ => n,
        };
        Value::Number(num)
    },
    <sign:"sign"?> <n:Sp<"float">> =>? {
        let span = n.1.clone();
        let num = match sign {
            Some('-') => format!("-{}", n.0),
            _ => n.0,
        };
        let f = num.parse::<f64>().map_err(|_| error2("not a float", span))?;
        Ok(Value::Float64(f))
    },
}

FieldId: u32 = {
    Sp<"decimal"> =>? <>.0.parse::<u32>().map_err(|_| error2("field id out of u32 range", <>.1)),
    Sp<"hex"> =>? u32::from_str_radix(&<>.0, 16).map_err(|_| error2("field id out of u32 range", <>.1)),
}

Field: Field = {
    <n:FieldId> "=" <v:AnnVal> =>? Ok(Field { id: Label::Id(n), val: v }),
    <n:Name> "=" <v:AnnVal> => Field { id: Label::Named(n), val: v },
}

VariantField: Field = {
    Field => <>,
    Name => Field { id: Label::Named(<>), val: Value::Null },
    FieldId =>? Ok(Field { id: Label::Id(<>), val: Value::Null }),
}

RecordField: Field = {
    Field => <>,
    AnnVal => Field { id: Label::Unnamed(0), val:<> },
}

// Common util
Name: String = {
    "id" => <>,
    Text => <>,
}

// Type
Typ: IDLType = {
    PrimTyp => <>,
    "opt" <Typ> => IDLType::OptT(Box::new(<>)),
    "vec" <Typ> => IDLType::VecT(Box::new(<>)),
    "blob" => IDLType::VecT(Box::new(IDLType::PrimT(PrimType::Nat8))),
    "record" "{" <Sp<SepBy<RecordFieldTyp, ";">>> "}" =>? {
        let mut id: u32 = 0;
        let span = <>.1.clone();
        let mut fs: Vec<TypeField> = <>.0.iter().map(|f| {
          let label = match f.label {
              Label::Unnamed(_) => { id = id + 1; Label::Unnamed(id - 1) },
              ref l => { id = l.get_id() + 1; l.clone() },
          };
          TypeField { label, typ: f.typ.clone() }
        }).collect();
        fs.sort_unstable_by_key(|TypeField { label, .. }| label.get_id());
        check_unique(fs.iter().map(|f| &f.label)).map_err(|e| error2(e, span))?;
        Ok(IDLType::RecordT(fs))
    },
    "variant" "{" <mut fs:Sp<SepBy<VariantFieldTyp, ";">>> "}" =>? {
        let span = fs.1.clone();
        fs.0.sort_unstable_by_key(|TypeField { label, .. }| label.get_id());
        check_unique(fs.0.iter().map(|f| &f.label)).map_err(|e| error2(e, span))?;
        Ok(IDLType::VariantT(fs.0))
    },
    "func" <FuncTyp> => IDLType::FuncT(<>),
    "service" <ActorTyp> => IDLType::ServT(<>),
    "principal" => IDLType::PrincipalT,
}

PrimTyp: IDLType = {
    "null" => IDLType::PrimT(PrimType::Null),
    "id" => {
      match PrimType::str_to_enum(&<>) {
        Some(p) => IDLType::PrimT(p),
        None => IDLType::VarT(<>),
      }
    },
}

FieldTyp: TypeField = {
    <n:FieldId> ":" <t:Typ> =>? Ok(TypeField { label: Label::Id(n), typ: t }),
    <n:Name> ":" <t:Typ> => TypeField { label: Label::Named(n), typ: t },
}

RecordFieldTyp: TypeField = {
    FieldTyp => <>,
    Typ => TypeField { label: Label::Unnamed(0), typ: <> },
}

VariantFieldTyp: TypeField = {
    FieldTyp => <>,
    Name => TypeField { label: Label::Named(<>), typ: IDLType::PrimT(PrimType::Null) },
    FieldId =>? Ok(TypeField { label: Label::Id(<>), typ: IDLType::PrimT(PrimType::Null) }),
}

TupTyp: Vec<IDLType> = "(" <SepBy<ArgTyp, ",">> ")" => <>;

FuncTyp: FuncType = {
    <args:TupTyp> "->" <rets:TupTyp> <modes:FuncMode*> =>
        FuncType { modes, args, rets },
}

ArgTyp: IDLType = {
    Typ => <>,
    Name ":" <Typ> => <>,
}

ActorTyp: Vec<Binding> = {
    "{" <mut fs:Sp<SepBy<MethTyp, ";">>> "}" =>? {
        let span = fs.1.clone();
        fs.0.sort_unstable_by_key(|Binding { id, .. }| id.clone());
        let labs: Vec<_> = fs.0.iter().map(|f| f.id.clone()).collect();
        check_unique(labs.iter()).map_err(|e| error2(e, span))?;
        Ok(fs.0)
    }
}

MethTyp: Binding = {
    <n:Name> ":" <f:FuncTyp> => Binding { id: n, typ: IDLType::FuncT(f) },
    <n:Name> ":" <id:"id"> => Binding { id: n, typ: IDLType::VarT(id) },
}

FuncMode: FuncMode = {
    "oneway" => FuncMode::Oneway,
    "query" => FuncMode::Query,
}

// Also allows trailing separator
#[inline]
SepBy<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
Sp<T>: (T, Span) =
    <l: @L> <t: T> <r: @R> => (t, l..r);
